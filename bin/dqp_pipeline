#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;

use File::Basename;
use Getopt::Long;

use FindBin qw($Bin);

use File::Slurp qw( write_file );

my $out_dir = '';
my $n_forward_filename = '';
my $n_reverse_filename = '';
my $t_forward_filename = '';
my $t_reverse_filename = '';
my $pre_capture_oligo  = '';
my $post_capture_oligo = '';
my $min_read_count     = 2;

GetOptions(
    "nf=s"   => \$n_forward_filename,
    "nr=s"   => \$n_reverse_filename,
    "tf=s"   => \$t_forward_filename,
    "tr=s"   => \$t_reverse_filename,
    "pre=s"  => \$pre_capture_oligo,
    "post=s" => \$post_capture_oligo,
    "out=s"  => \$out_dir,
    "min=i"  => \$min_read_count,
);

exit_giving_usage() if grep { ! $_ } ( $out_dir, $n_forward_filename, $n_reverse_filename, $t_forward_filename, $t_reverse_filename, $pre_capture_oligo, $post_capture_oligo, $min_read_count,);








my $n = remove_path_and_ext($n_forward_filename);
my $t = remove_path_and_ext($t_forward_filename);

# Determine intermediate file names
my $n_combined = "$out_dir/$n.combined.fa";
my $t_combined = "$out_dir/$t.combined.fa";

my $n_trimmed = "$out_dir/$n.combined.trimmed.fa";
my $t_trimmed = "$out_dir/$t.combined.trimmed.fa";

my $n_aa = "$out_dir/$n.combined.trimmed.aa.fa";
my $t_aa = "$out_dir/$t.combined.trimmed.aa.fa";

my $n_count_fa = "$out_dir/$n.combined.trimmed.aa.count.fa";
my $t_count_fa = "$out_dir/$t.combined.trimmed.aa.count.fa";

my $n_count_base = "$out_dir/$n.combined.trimmed.aa";
my $n_count_tab = "$out_dir/$n.combined.trimmed.aa.tab.txt";
my $t_count_base = "$out_dir/$t.combined.trimmed.aa";
my $t_count_tab = "$out_dir/$t.combined.trimmed.aa.tab.txt";

my $output_file = "$out_dir/$n.combined.trimmed.aa.tab.compared_to.$t.combined.trimmed.aa.tab.txt";
my $run_script = "$output_file.run_to_create";

my $big_script =<<"END";
#!/bin/bash

# Something like the following may be necessary depending on how you have Pandaseq installed on your system
# (commented out by default)
#module load pandaseq/pandaseq-2.10

pandaseq -f $n_forward_filename -r $n_reverse_filename -w $n_combined &> $n_combined.pandaseq.log
pandaseq -f $t_forward_filename -r $t_reverse_filename -w $t_combined &> $t_combined.pandaseq.log

$Bin/fasta_trim $n_combined $pre_capture_oligo $post_capture_oligo > $n_trimmed
$Bin/fasta_trim $t_combined $pre_capture_oligo $post_capture_oligo > $t_trimmed

$Bin/trans_cdna $n_trimmed fasta > $n_aa
$Bin/trans_cdna $t_trimmed fasta > $t_aa

$Bin/count $n_aa $n_count_base $min_read_count
$Bin/count $t_aa $t_count_base $min_read_count

$Bin/compare $n_count_tab $t_count_tab > $output_file

END

write_file($run_script, $big_script);

system("chmod u+x $run_script; $run_script");

sub remove_path_and_ext
{
    my $file_name = shift;

    # remove everything after the first period
    (my $extensionless_name = $file_name) =~ s/\..*$//;

    my $basename = basename($extensionless_name);

    return $basename;
}

sub exit_giving_usage
{
    say <<"END-USAGE";
USAGE:

    dqp_pipeline --nf <file name> --nr <file name> --tf <file name> --tr=<file name> --out <dir name> --pre=<DNA nucleotide sequence> --post=<DNA nucleotide sequence> [--min=<number>]" );

    --nf FASTQ file containing the "(n)egative" sample's (f)orward reads
    --nr FASTQ file containing the "(n)egative" sample's (r)everse reads
    --tf FASTQ file containing the "(t)arget" sample's (f)orward reads
    --tr FASTQ file containing the "(t)arget" sample's (r)everse reads

    --pre DNA nucleotide sequence preceding the sequence of interest. To avoid a frameshift in the computed translation, this should be the sequence immediately preceding the first codon that you desire translated.
    --post DNA nucleotide sequence immediately following the sequence of interest.

    Together the "--pre" and "--post" sequences define a region that will be "trimmed" out.

    --min Minimum read count to be included in the analysis.

    $0 --nf=n_forward.fq --nr=n_reverse.fq --tf=t_forward.fq --tr=t_reverse.fq --pre=ATG --post=TAG --min=5

Example use of pipeline:

    dqp_pipeline --nf=n.forward_reads.fastq.gz --nr=n.reverse_reads.fastq.gz --tf=t.forward_reads.fastq.gz --tr=t.reverse_reads_fastq.gz --out=out.dir --pre=AAACCCATG --post=GGGTTTTAG --min=2

# Intermediate files created in the specified directory (named as for this example)

FASTA nucleotide files containing the sequence of the forward and reverse reads of the same fragment combined (using pandaseq with its defaults):

    n.combined.fa
    t.combined.fa

FASTA nucelotide files containing the nucleotide sequence between the "pre" and "post" sequences (nonmatching sequences are currently ignored)

    n.combined.trimmed.fa
    t.combined.trimmed.fa

FASTA protein files containing the translation of the "trimmed" files

    n.combined.trimmed.aa.fa
    t.combined.trimmed.aa.fa

The FASTA protein files made nonredundant, counts of each sequence, and reads per million (RPMs) are included in the sequence identifier.

    n.combined.trimmed.aa.count.fa
    t.combined.trimmed.aa.count.fa

Tabular version of the nonredundant FASTA protein files

    n.combined.trimmed.aa.count.tab.txt
    t.combined.trimmed.aa.count.tab.txt

# Final output (named as for this example)

The final output is a table containing a comparison of the original two files. For cases in which one or the other sample lacked reads, an RPM of 0.001 is used in calculating log (RPMt/RPMn) where RPMt is the RPM of the sequence from the target sample and RMPn is the RPM of the sequence from the "negative" sample. In this case, the name of this table would be

    n.combined.trimmed.aa.count.tab.compared_to.t.combined.trimmed.aa.count.tab.txt

END-USAGE

    exit;
}

sub looks_like_flag
{
    my $arg = shift;
    return index($arg, '-') == 0;
}
